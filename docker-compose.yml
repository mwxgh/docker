version: "3"

services:
  # MySQL
  mysql:
    platform: linux/x86_64
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: sample_db
      MYSQL_USER: dockerize_mysql
      MYSQL_PASSWORD: 0111mvtT
    ports:
      - "13306:3306"
    command: --default-authentication-plugin=caching_sha2_password
    volumes:
      - ./.docker/mysql/data:/var/lib/mysql
      - ./.docker/mysql/conf.d:/etc/mysql/mysql.conf.d/
    restart: always
    networks:
      - backend

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: pma
    links:
      - mysql
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_ARBITRARY: 1
    restart: always
    ports:
      - 8081:80
    networks:
      - backend

  mongodb:
    image: mongo:latest
    container_name: mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: auth
    ports:
      - 27017:27017
    volumes:
      - ./.docker/mongodb-data:/data/db
    networks:
      - backend

  mongo-express:
    image: mongo-express:latest
    container_name: mongo_express
    restart: unless-stopped
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ENABLE_ADMIN: true
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_BASICAUTH_USERNAME: dockerize_mongo
      ME_CONFIG_BASICAUTH_PASSWORD: 0111mvtT
      ME_CONFIG_MONGODB_PORT: 27017
    depends_on:
      - mongodb
    networks:
      - backend

  # Redis Service
  redis:
    image: redis:latest
    container_name: redis
    restart: always
    environment:
      ALLOW_EMPTY_PASSWORD: yes
      REDIS_DISABLE_COMMANDS: FLUSHDB,FLUSHALL
    ports:
      - "6379:6379"
    volumes:
      - ./.docker/redis/data:/data
    networks:
      - backend

  # Redis UI
  redis-ui:
    image: erikdubbelboer/phpredisadmin
    restart: always
    container_name: redis_ui
    environment:
      ADMIN_USER: admin
      ADMIN_PASS: password
      REDIS_1_HOST: redis
      REDIS_1_PORT: 6379
    ports:
      - "8082:81"
    links:
      - redis
    networks:
      - backend

  postgres:
    image: postgres:16
    container_name: postgres
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_DB: sample_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    volumes:
      - ./.docker/db:/var/lib/postgresql@16/data
    networks:
      - backend

  phppgadmin:
    restart: always
    image: dockage/phppgadmin:latest
    ports:
      - "80:80"
      - "443:443"
    environment:
      - PHP_PG_ADMIN_SERVER_DESC=PostgreSQL
      - PHP_PG_ADMIN_SERVER_HOST=
      - PHP_PG_ADMIN_SERVER_PORT=5432
      - PHP_PG_ADMIN_SERVER_SSL_MODE=allow
      - PHP_PG_ADMIN_SERVER_DEFAULT_DB=template1
      - PHP_PG_ADMIN_SERVER_PG_DUMP_PATH=/usr/bin/pg_dump
      - PHP_PG_ADMIN_SERVER_PG_DUMPALL_PATH=/usr/bin/pg_dumpall

      - PHP_PG_ADMIN_DEFAULT_LANG=auto
      - PHP_PG_ADMIN_AUTO_COMPLETE=default on
      - PHP_PG_ADMIN_EXTRA_LOGIN_SECURITY=false
      - PHP_PG_ADMIN_OWNED_ONLY=false
      - PHP_PG_ADMIN_SHOW_COMMENTS=true
      - PHP_PG_ADMIN_SHOW_ADVANCED=false
      - PHP_PG_ADMIN_SHOW_SYSTEM=false
      - PHP_PG_ADMIN_MIN_PASSWORD_LENGTH=1
      - PHP_PG_ADMIN_LEFT_WIDTH=200
      - PHP_PG_ADMIN_THEME=default
      - PHP_PG_ADMIN_SHOW_OIDS=false
      - PHP_PG_ADMIN_MAX_ROWS=30
      - PHP_PG_ADMIN_MAX_CHARS=50
      - PHP_PG_ADMIN_USE_XHTML_STRICT=false
      - PHP_PG_ADMIN_HELP_BASE=http://www.postgresql.org/docs/%s/interactive/
      - PHP_PG_ADMIN_AJAX_REFRESH=3
    networks:
      - backend

  minio:
    image: docker.io/bitnami/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: dockerize_minio
      MINIO_ROOT_PASSWORD: 0111mvtT
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./.docker/minio_data:/data
    restart: always
    networks:
      - backend
  
  kafka:
    image: bitnami/kafka:3.4
    hostname: dockerize_kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    volumes:
      - "./volumes/kafka:/bitnami/kafka/config"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      # - KAFKA_KRAFT_CLUSTER_ID=M8mh0vTW2f7uOo4YI38u3TRB7Kd2q1UU
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092,EXTERNAL://dockerize_kafka:9094
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - BITNAMI_DEBUG=yes
      - KAFKA_CFG_NUM_PARTITIONS=2
    restart: always
    networks:
      - backend

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    environment:
      AUTH_TYPE: DISABLED
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: dockerize_kafka:9094
    depends_on:
      - kafka
    restart: always
    networks:
      - backend

volumes:
  minio_data:

networks:
  backend:
    driver: bridge
